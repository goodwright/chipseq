def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}

includeConfig "../../nextflow.config"

params {
    gene_bed = null
    blacklist = null
    bwa_index = null
}

process {
    withName: 'GTF2BED|BWA_INDEX|CHROMAP_INDEX|STAR_GENOMEGENERATE|BOWTIE2_BUILD|' {
        publishDir = [
            path: { "${params.outdir}/${task.process.tokenize(':')[-1].toLowerCase()}" },
            mode: "symlink",
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
}

nextflow.enable.configProcessNamesValidation = false